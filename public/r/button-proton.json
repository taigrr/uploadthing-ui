{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-proton",
  "type": "registry:component",
  "title": "Proton Drive Button",
  "description": "A button taken inspiration from the proton drive UI",
  "dependencies": [
    "zustand@latest",
    "uploadthing@latest",
    "uploadthing/react@latest",
    "paralleldrive/cuid2@latest",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "table",
    "badge",
    "alert-dialog"
  ],
  "files": [
    {
      "path": "registry/new-york/button-proton/button-proton.tsx",
      "content": "//////////////////////////////////////////////////////////////////////////////////\r\n// UTButtonProton\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\n\"use client\";\r\n\r\n// Global Imports\r\nimport { useRef, useCallback, useState, useEffect } from \"react\";\r\nimport { generatePermittedFileTypes } from \"uploadthing/client\";\r\nimport { X } from \"lucide-react\";\r\n\r\n// Local Imports\r\nimport { useFilesStore } from \"@/store/button-proton-store\";\r\nimport { useUploadThing } from \"@/lib/uploadthing\";\r\nimport { UTUIFileStatus } from \"@/lib/uploadthing-ui-types\";\r\nimport {\r\n  capitalizeFirstLetter,\r\n  formatBytes,\r\n  getUploadedAmount,\r\n} from \"@/lib/uploadthing-ui-utils\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableHeader,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from \"@/components/ui/alert-dialog\";\r\n\r\n// Body\r\nexport default function UTUIButtonProton() {\r\n  // [1] Refs & States\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const { addFiles, openModel } = useFilesStore();\r\n\r\n  // [2] Deriving the accepted file types\r\n  const { routeConfig } = useUploadThing(\"imageUploader\");\r\n  const acceptedFileTypes =\r\n    generatePermittedFileTypes(routeConfig).fileTypes.join(\",\");\r\n\r\n  // [3] Handlers\r\n  const handleButtonClick = () => {\r\n    fileInputRef.current?.click();\r\n  };\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    openModel();\r\n\r\n    const selectedFiles = e.target.files;\r\n    if (selectedFiles && selectedFiles.length > 0) {\r\n      // Convert FileList to Array and add them to state\r\n      addFiles(Array.from(selectedFiles));\r\n\r\n      // Reset the input to allow selecting the same files again\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  // JSX\r\n  return (\r\n    <div className=\"flex flex-col gap-8 text-sm\">\r\n      {/* Hidden input for selecting files */}\r\n      <input\r\n        type=\"file\"\r\n        ref={fileInputRef}\r\n        onChange={handleFileChange}\r\n        style={{ display: \"none\" }}\r\n        multiple\r\n        accept={acceptedFileTypes}\r\n      />\r\n      {/* Button to trigger the file selection */}\r\n      <Button onClick={handleButtonClick}>Select Files to Upload</Button>\r\n      <FileModel />\r\n    </div>\r\n  );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// File Model\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\n// Component\r\nfunction FileModel() {\r\n  // [1] Refs & States & Callbacks\r\n  const {\r\n    files,\r\n    displayModel,\r\n    updateFileStatus,\r\n    closeModel,\r\n    toggleModel,\r\n    resetFiles,\r\n  } = useFilesStore();\r\n\r\n  const handleStatusChange = useCallback(\r\n    (id: string, status: UTUIFileStatus, url?: string) => {\r\n      updateFileStatus(id, status, url);\r\n    },\r\n    [updateFileStatus]\r\n  );\r\n\r\n  // [2] Derived State\r\n  const isUploadComplete = files.every((file) => file.status === \"complete\");\r\n\r\n  // [3] JSX\r\n  return (\r\n    <AlertDialog open={displayModel} onOpenChange={closeModel}>\r\n      <AlertDialogContent location=\"bottom-right\" hideOverlay>\r\n        <AlertDialogHeader>\r\n          <AlertDialogTitle asChild>\r\n            <div className=\"flex items-center justify-between\">\r\n              {isUploadComplete ? (\r\n                <p>\r\n                  {files.length} file{files.length > 1 ? \"s\" : \"\"} uploaded\r\n                </p>\r\n              ) : (\r\n                <p>\r\n                  {files.length} file{files.length > 1 ? \"s\" : \"\"} uploading\r\n                </p>\r\n              )}\r\n              <div className=\"flex gap-2\">\r\n                <AlertDialogCancel\r\n                  disabled={!isUploadComplete}\r\n                  onClick={() => {\r\n                    toggleModel();\r\n\r\n                    setTimeout(() => {\r\n                      resetFiles();\r\n                    }, 500);\r\n                  }}\r\n                >\r\n                  <X className=\"stroke-1\" />\r\n                </AlertDialogCancel>\r\n              </div>\r\n            </div>\r\n          </AlertDialogTitle>\r\n          <AlertDialogDescription asChild>\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Name</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead className=\"text-right\">Uploading</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {files.map((fileItem) => (\r\n                  <FileRow\r\n                    key={fileItem.id}\r\n                    fileId={fileItem.id}\r\n                    file={fileItem.file}\r\n                    onStatusChange={handleStatusChange}\r\n                    status={fileItem.status}\r\n                  />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// File Row\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\n// Types\r\ninterface FileUploaderProps {\r\n  fileId: string;\r\n  file: File;\r\n  status: UTUIFileStatus;\r\n  onStatusChange: (id: string, status: UTUIFileStatus, url?: string) => void;\r\n}\r\n\r\n// Component\r\nfunction FileRow({ fileId, file, status, onStatusChange }: FileUploaderProps) {\r\n  // [1] State & Ref\r\n  const [progress, setProgress] = useState(0);\r\n  const isMounted = useRef(true);\r\n  const hasStartedUpload = useRef(false);\r\n\r\n  // [2] Uploadthing\r\n  const { startUpload, isUploading } = useUploadThing(\"imageUploader\", {\r\n    uploadProgressGranularity: \"fine\",\r\n    onUploadProgress: (progress) => {\r\n      // Only update state if component is still mounted (prevents memory leaks)\r\n      if (isMounted.current) {\r\n        setProgress(progress);\r\n      }\r\n    },\r\n    onClientUploadComplete: (res) => {\r\n      // Only update state if component is still mounted (prevents memory leaks)\r\n      if (isMounted.current && res?.[0]) {\r\n        onStatusChange(fileId, \"complete\", res[0].url);\r\n      }\r\n    },\r\n    onUploadError: () => {\r\n      // Only update state if component is still mounted (prevents memory leaks)\r\n      if (isMounted.current) {\r\n        onStatusChange(fileId, \"error\");\r\n      }\r\n    },\r\n  });\r\n\r\n  // [3] Effects\r\n  useEffect(() => {\r\n    // Only start upload if we haven't already\r\n    if (!hasStartedUpload.current || isUploading) {\r\n      hasStartedUpload.current = true;\r\n\r\n      startUpload([file]);\r\n      onStatusChange(fileId, \"uploading\");\r\n    }\r\n  }, [fileId, file, startUpload, onStatusChange]);\r\n\r\n  // [4] JSX\r\n  return (\r\n    <TableRow>\r\n      <TableCell className=\"font-medium truncate max-w-48 text-left\">\r\n        {file.name}\r\n      </TableCell>\r\n      <TableCell>\r\n        <Badge\r\n          variant={\r\n            status === \"complete\"\r\n              ? \"success\"\r\n              : status === \"error\"\r\n              ? \"destructive\"\r\n              : \"default\"\r\n          }\r\n        >\r\n          {capitalizeFirstLetter(status)}\r\n        </Badge>\r\n      </TableCell>\r\n      <TableCell className=\"text-right\">\r\n        {getUploadedAmount(progress, file.size)} / {formatBytes(file.size)}\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "store/button-proton-store.ts",
      "content": "// Global Imports\r\n\r\nimport { create } from \"zustand\";\r\nimport { createId } from \"@paralleldrive/cuid2\";\r\nimport { UTUIFileStatus, UTUIUploadFile } from \"@/lib/uploadthing-ui-types\";\r\n\r\n// Local Imports\r\n\r\n// Body\r\n// [1] Types\r\ninterface FilesState {\r\n  files: UTUIUploadFile[];\r\n  displayModel: boolean;\r\n  addFiles: (newFiles: File[]) => void;\r\n  updateFileStatus: (id: string, status: UTUIFileStatus, url?: string) => void;\r\n  resetFiles: () => void;\r\n  openModel: () => void;\r\n  closeModel: () => void;\r\n  toggleModel: () => void;\r\n}\r\n\r\n// [2] Store\r\nexport const useFilesStore = create<FilesState>((set) => ({\r\n  files: [],\r\n  displayModel: false,\r\n  addFiles: (newFiles) =>\r\n    set((state) => ({\r\n      files: [\r\n        ...state.files,\r\n        ...newFiles.map((file) => ({\r\n          id: createId(),\r\n          file,\r\n          status: \"pending\" as UTUIFileStatus,\r\n          createdAt: new Date(),\r\n        })),\r\n      ],\r\n    })),\r\n  updateFileStatus: (id, status, url) =>\r\n    set((state) => ({\r\n      files: state.files.map((item) =>\r\n        item.id === id ? { ...item, status, url } : item\r\n      ),\r\n    })),\r\n  resetFiles: () =>\r\n    set({\r\n      files: [],\r\n    }),\r\n  openModel: () => set({ displayModel: true }),\r\n  closeModel: () => set({ displayModel: false }),\r\n  toggleModel: () => set((state) => ({ displayModel: !state.displayModel })),\r\n}));\r\n",
      "type": "registry:file",
      "target": "store/button-proton-store.ts"
    }
  ]
}