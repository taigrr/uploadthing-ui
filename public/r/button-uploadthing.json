{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-uploadthing",
  "type": "registry:component",
  "title": "Uploadthing Button",
  "description": "A button taken inspiration from the uploadthing UI",
  "dependencies": [
    "zustand",
    "uploadthing",
    "@uploadthing/react",
    "@paralleldrive/cuid2",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "sonner"
  ],
  "files": [
    {
      "path": "registry/new-york/ut-button-uploadthing/button-uploadthing.tsx",
      "content": "//////////////////////////////////////////////////////////////////////////////////\r\n// UTButtonUploadthing\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\n\"use client\";\r\n\r\n// Global Imports\r\nimport { createId } from \"@paralleldrive/cuid2\";\r\nimport { Json } from \"@uploadthing/shared\";\r\nimport { CircleCheck, GripVertical, Info } from \"lucide-react\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { toast } from \"sonner\";\r\nimport { generatePermittedFileTypes } from \"uploadthing/client\";\r\nimport { UploadThingError } from \"uploadthing/server\";\r\n\r\n// Local Imports\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useUploadThing } from \"@/lib/uploadthing\";\r\nimport { UTUIFileStatus, UTUIUploadFile } from \"@/lib/uploadthing-ui-types\";\r\nimport { useFilesStore } from \"@/store/button-uploadthing-store\";\r\n\r\n// Body\r\nexport default function UTUIButtonUploadthing() {\r\n  // [1] Refs & States\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const { setFiles, historicFiles } = useFilesStore();\r\n\r\n  // [2] Deriving the accepted file types\r\n  const { routeConfig } = useUploadThing(\"imageUploader\");\r\n  const acceptedFileTypes = generatePermittedFileTypes(routeConfig)\r\n    .fileTypes.map((fileType) => {\r\n      if (fileType.includes(\"/\")) {\r\n        return fileType;\r\n      } else {\r\n        return `${fileType}/*`;\r\n      }\r\n    })\r\n    .join(\",\");\r\n\r\n  // [3] Handlers\r\n  const handleButtonClick = () => {\r\n    fileInputRef.current?.click();\r\n  };\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFiles = e.target.files;\r\n    if (selectedFiles && selectedFiles.length > 0) {\r\n      // Convert FileList to Array and add to store\r\n      setFiles(\r\n        Array.from(selectedFiles).map((fileObj) => ({\r\n          file: fileObj,\r\n          id: createId(),\r\n          fileObj,\r\n          status: \"pending\" as UTUIFileStatus, // Use type assertion here\r\n          createdAt: new Date(),\r\n        })),\r\n      );\r\n\r\n      // Reset the input to allow selecting the same files again\r\n      if (fileInputRef.current) {\r\n        fileInputRef.current.value = \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  // [4] JSX\r\n  return (\r\n    <div className=\"flex flex-col gap-8 text-sm\">\r\n      <div>\r\n        <input\r\n          type=\"file\"\r\n          ref={fileInputRef}\r\n          onChange={handleFileChange}\r\n          style={{ display: \"none\" }}\r\n          multiple\r\n          accept={acceptedFileTypes}\r\n        />\r\n        <Button onClick={handleButtonClick}>Select Files to Upload</Button>\r\n      </div>\r\n\r\n      {historicFiles.map((fileObj) => (\r\n        <DisplayingToasts key={fileObj.id} uploadFile={fileObj} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// DIsplaying Toasts\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction DisplayingToasts({\r\n  uploadFile,\r\n  onUploadProgress,\r\n  onClientUploadComplete,\r\n  onUploadError,\r\n}: {\r\n  uploadFile: UTUIUploadFile;\r\n  onUploadProgress?: (progress: number) => void;\r\n  onClientUploadComplete?: (res: any) => void;\r\n  onUploadError?: (error: UploadThingError<Json>) => void;\r\n}) {\r\n  // [1] Refs & States\r\n  const isMounted = useRef(true);\r\n  const hasStartedUpload = useRef(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [toastId, setToastId] = useState<string | number | undefined>(\r\n    undefined,\r\n  );\r\n  const { updateFileStatus, removeFile } = useFilesStore();\r\n\r\n  // [2] Uploadthing\r\n  const { startUpload, isUploading } = useUploadThing(\"imageUploader\", {\r\n    uploadProgressGranularity: \"fine\",\r\n    onUploadProgress: (progress) => {\r\n      if (isMounted.current) {\r\n        setProgress(progress);\r\n\r\n        // Your additional code here\r\n        onUploadProgress?.(progress);\r\n      }\r\n    },\r\n    onClientUploadComplete: (res) => {\r\n      if (isMounted.current && res?.[0]) {\r\n        updateFileStatus(uploadFile.id, \"complete\", res[0].url);\r\n\r\n        // Your additional code here\r\n        onClientUploadComplete?.(res);\r\n      }\r\n    },\r\n    onUploadError: (error) => {\r\n      if (isMounted.current) {\r\n        updateFileStatus(uploadFile.id, \"error\");\r\n\r\n        // Your additional code here\r\n        onUploadError?.(error);\r\n      }\r\n    },\r\n  });\r\n\r\n  // [3] Effects\r\n  // When a file isn't uploading\r\n  useEffect(() => {\r\n    if (!hasStartedUpload.current && !isUploading) {\r\n      hasStartedUpload.current = true;\r\n\r\n      startUpload([uploadFile.file]);\r\n      updateFileStatus(uploadFile.id, \"uploading\");\r\n\r\n      // Adding a toast for the upload\r\n      setToastId(\r\n        toast.custom(\r\n          (t) => <ToastComponent progress={progress} uploadFile={uploadFile} />,\r\n          {\r\n            duration: Infinity,\r\n          },\r\n        ),\r\n      );\r\n\r\n      return;\r\n    }\r\n  }, [\r\n    uploadFile,\r\n    progress,\r\n    isUploading,\r\n    hasStartedUpload,\r\n    toast,\r\n    startUpload,\r\n    updateFileStatus,\r\n    setToastId,\r\n  ]);\r\n\r\n  // When a file changes its status during the uploading process\r\n  useEffect(() => {\r\n    if (uploadFile.status === \"complete\" && toastId) {\r\n      toast.custom((t) => <ToastComponentCompleted uploadFile={uploadFile} />, {\r\n        id: toastId,\r\n        duration: 4000,\r\n      });\r\n\r\n      // Removing file from state\r\n      removeFile(uploadFile.id);\r\n\r\n      return;\r\n    }\r\n\r\n    if (uploadFile.status === \"error\" && toastId) {\r\n      toast.custom((t) => <ToastComponentError uploadFile={uploadFile} />, {\r\n        id: toastId,\r\n        duration: 4000,\r\n      });\r\n\r\n      return;\r\n    }\r\n  }, [uploadFile, toastId, toast, removeFile]);\r\n\r\n  // When a file starts its uploading process\r\n  useEffect(() => {\r\n    if (toastId && isUploading) {\r\n      // Update the progress inside the toast\r\n      toast.custom(\r\n        (t) => <ToastComponent progress={progress} uploadFile={uploadFile} />,\r\n        { id: toastId },\r\n      );\r\n    }\r\n  }, [progress, toastId, isUploading]);\r\n\r\n  return <div className=\"hidden\">{uploadFile.id}</div>;\r\n}\r\n\r\nfunction ToastComponent({\r\n  progress,\r\n  uploadFile,\r\n}: {\r\n  progress: number;\r\n  uploadFile: UTUIUploadFile;\r\n}) {\r\n  return (\r\n    <div className=\"flex w-96 select-none items-center gap-4 px-4 py-4 text-xs\">\r\n      <div className=\"min-w-10\">\r\n        <CircularProgressBar percentage={progress} />\r\n      </div>\r\n      <p className=\"truncate\">Uploading {uploadFile.file.name}</p>\r\n      <GripVertical className=\"ml-auto min-w-10 stroke-1\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ToastComponentCompleted({\r\n  uploadFile,\r\n}: {\r\n  uploadFile: UTUIUploadFile;\r\n}) {\r\n  return (\r\n    <div className=\"flex w-96 select-none items-center gap-4 px-4 py-4 text-xs\">\r\n      <CircleCheck className=\"min-w-6 fill-foreground stroke-background stroke-1\" />\r\n      <div className=\"flex flex-col truncate\">\r\n        <p className=\"truncate\">File uploaded successfully!</p>\r\n        <p className=\"truncate\">Uploaded {uploadFile.file.name}</p>\r\n      </div>\r\n      <GripVertical className=\"ml-auto min-w-10 stroke-1\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ToastComponentError({ uploadFile }: { uploadFile: UTUIUploadFile }) {\r\n  return (\r\n    <div className=\"flex w-96 select-none items-center gap-4 truncate px-4 py-4 text-xs\">\r\n      <Info className=\"min-w-6 fill-foreground stroke-background stroke-1\" />\r\n      <div className=\"flex flex-col truncate\">\r\n        <p className=\"truncate\">File couldn't be uploaded</p>\r\n        <p className=\"truncate\">{uploadFile.file.name}</p>\r\n      </div>\r\n      <GripVertical className=\"ml-auto min-w-10 stroke-1\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// Circular Progress Bar\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction CircularProgressBar({ percentage }: { percentage: number }) {\r\n  // [1] JSX\r\n  return (\r\n    <div className=\"relative\">\r\n      <svg\r\n        className=\"-rotate-90\"\r\n        viewBox=\"0 0 36 36\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <circle\r\n          cx=\"18\"\r\n          cy=\"18\"\r\n          r=\"16\"\r\n          fill=\"none\"\r\n          className=\"stroke-current stroke-2 text-primary\"\r\n        ></circle>\r\n        <circle\r\n          cx=\"18\"\r\n          cy=\"18\"\r\n          r=\"16\"\r\n          fill=\"none\"\r\n          className=\"stroke-current stroke-2 text-secondary\"\r\n          strokeDasharray=\"100\"\r\n          strokeDashoffset={percentage}\r\n          strokeLinecap=\"round\"\r\n        ></circle>\r\n      </svg>\r\n      <div className=\"absolute start-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 transform\">\r\n        <span className=\"text-center text-xs font-semibold text-primary\">\r\n          {percentage}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/uploadthing-ui/button-uploadthing.tsx"
    },
    {
      "path": "store/button-uploadthing-store.ts",
      "content": "// Global Imports\r\n\r\nimport { create } from \"zustand\";\r\n\r\n// Local Imports\r\n\r\n// Body\r\nexport type FileStatus = \"pending\" | \"uploading\" | \"complete\" | \"error\";\r\n\r\nexport interface UploadFile {\r\n  id: string;\r\n  file: File;\r\n  status: FileStatus;\r\n  url?: string;\r\n  createdAt: Date;\r\n}\r\n\r\ninterface FilesState {\r\n  historicFiles: UploadFile[];\r\n  setFiles: (newFiles: UploadFile[]) => void;\r\n  updateFileStatus: (id: string, status: FileStatus, url?: string) => void;\r\n  removeFile: (id: string) => void;\r\n}\r\n\r\nexport const useFilesStore = create<FilesState>((set) => ({\r\n  files: [],\r\n  historicFiles: [],\r\n  setFiles: (newFiles) =>\r\n    set((state) => {\r\n      // Check if the file is already in the historicFiles array. If not, add it as well\r\n      const newHistoricFiles = Array.from(newFiles).filter(\r\n        (file) =>\r\n          !state.historicFiles.some(\r\n            (historicFile) => historicFile.id === file.id\r\n          )\r\n      );\r\n\r\n      return {\r\n        files: newFiles,\r\n        historicFiles: [...state.historicFiles, ...newHistoricFiles],\r\n      };\r\n    }),\r\n  updateFileStatus: (id, status, url) =>\r\n    set((state) => ({\r\n      historicFiles: state.historicFiles.map((item) =>\r\n        item.id === id ? { ...item, status, url } : item\r\n      ),\r\n    })),\r\n  removeFile: (id) =>\r\n    set((state) => ({\r\n      historicFiles: state.historicFiles.filter((item) => item.id !== id),\r\n    })),\r\n}));\r\n",
      "type": "registry:file",
      "target": "store/button-uploadthing-store.ts"
    }
  ]
}