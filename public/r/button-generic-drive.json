{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button-generic-drive",
  "type": "registry:component",
  "title": "Generic Drive Button",
  "description": "Workflow: Inside storage drive applications",
  "dependencies": [
    "zustand",
    "uploadthing",
    "@uploadthing/react",
    "@uploadthing/shared",
    "paralleldrive/cuid2",
    "lucide-react",
    "@radix-ui/react-alert-dialog"
  ],
  "registryDependencies": [
    "button",
    "table"
  ],
  "files": [
    {
      "path": "registry/new-york/button-generic-drive/button-generic-drive.tsx",
      "content": "//////////////////////////////////////////////////////////////////////////////////\r\n// UTUIButtonGenericDrive\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\n\"use client\";\r\n\r\n// Global Imports\r\nimport { X } from \"lucide-react\";\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { generatePermittedFileTypes } from \"uploadthing/client\";\r\n\r\n// Local Imports\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\";\r\nimport { useUploadThing } from \"@/lib/uploadthing\";\r\nimport { UTUIFileStatus, UTUIFunctionsProps } from \"@/lib/uploadthing-ui-types\";\r\nimport {\r\n  capitalizeFirstLetter,\r\n  formatBytes,\r\n  getUploadedAmount,\r\n} from \"@/lib/uploadthing-ui-utils\";\r\nimport { useGenericDriveStore } from \"@/store/button-generic-drive-store\";\r\n\r\n// Body\r\nexport default function UTUIButtonGenericDrive({\r\n  UTUIFunctionsProps,\r\n}: {\r\n  UTUIFunctionsProps: UTUIFunctionsProps;\r\n}) {\r\n  // [1] Refs & States\r\n  const fileInputRef = useRef<HTMLInputElement>(null);\r\n  const { addFiles, openModel, files, resetFiles } = useGenericDriveStore();\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n\r\n  // [2] Derived states\r\n  const { routeConfig } = useUploadThing(UTUIFunctionsProps.fileRoute);\r\n  const acceptedFileTypes = generatePermittedFileTypes(routeConfig)\r\n    .fileTypes.map((fileType) => {\r\n      if (fileType.includes(\"/\")) {\r\n        return fileType;\r\n      } else {\r\n        return `${fileType}/*`;\r\n      }\r\n    })\r\n    .join(\",\");\r\n\r\n  const [abortSignal, setAbortSignal] = useState<AbortSignal | undefined>(\r\n    undefined,\r\n  );\r\n\r\n  // [3] Handlers\r\n  const handleButtonClick = () => {\r\n    fileInputRef.current?.click();\r\n  };\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    openModel();\r\n\r\n    // Create a new AbortController for this upload\r\n    abortControllerRef.current = new AbortController();\r\n    setAbortSignal(abortControllerRef.current.signal);\r\n\r\n    const selectedFiles = e.target.files;\r\n    if (selectedFiles && selectedFiles.length > 0 && fileInputRef.current) {\r\n      // Convert FileList to Array and add them to state\r\n      addFiles(Array.from(selectedFiles));\r\n\r\n      // Reset the input to allow selecting the same files again\r\n      fileInputRef.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  function resetAbortController() {\r\n    if (abortControllerRef.current) {\r\n      resetFiles();\r\n      abortControllerRef.current.abort();\r\n      setAbortSignal(abortControllerRef.current.signal);\r\n    }\r\n  }\r\n\r\n  // JSX\r\n  return (\r\n    <div className=\"flex flex-col gap-8 text-sm\">\r\n      {/* Hidden input for selecting files */}\r\n      <input\r\n        type=\"file\"\r\n        ref={fileInputRef}\r\n        onChange={handleFileChange}\r\n        style={{ display: \"none\" }}\r\n        multiple\r\n        accept={acceptedFileTypes}\r\n      />\r\n      {/* Button to trigger the file selection */}\r\n      <Button className=\"w-fit\" onClick={handleButtonClick}>\r\n        Select Files to Upload\r\n      </Button>\r\n      <FileModel\r\n        abortSignal={abortSignal}\r\n        resetAbortController={resetAbortController}\r\n        UTUIFunctionsProps={UTUIFunctionsProps}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// File Model\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\nfunction FileModel({\r\n  abortSignal,\r\n  resetAbortController,\r\n  UTUIFunctionsProps,\r\n}: {\r\n  abortSignal?: AbortSignal;\r\n  resetAbortController: () => void;\r\n  UTUIFunctionsProps: UTUIFunctionsProps;\r\n}) {\r\n  // [1] Refs & States & Callbacks\r\n  const { files, displayModel, updateFileStatus, closeModel, resetFiles } =\r\n    useGenericDriveStore();\r\n  const [stopConfirmationModel, setStopConfirmationModel] = useState(false);\r\n\r\n  const handleStatusChange = useCallback(\r\n    (id: string, status: UTUIFileStatus, url?: string) => {\r\n      updateFileStatus(id, status, url);\r\n    },\r\n    [updateFileStatus],\r\n  );\r\n\r\n  // [2] Derived State\r\n  const isUploadComplete = files.every(\r\n    (file) => file.status === \"complete\" || file.status === \"error\",\r\n  );\r\n\r\n  // [3] Handlers\r\n  function toggleIsStopConfirmationModel() {\r\n    setStopConfirmationModel((cur) => !cur);\r\n  }\r\n\r\n  function onStopTransfers() {\r\n    closeModel();\r\n    resetFiles();\r\n    closeStopConfirmationModel();\r\n\r\n    resetAbortController();\r\n  }\r\n\r\n  function closeStopConfirmationModel() {\r\n    setStopConfirmationModel(false);\r\n  }\r\n\r\n  function closeModelAfterUpload() {\r\n    closeStopConfirmationModel();\r\n    closeModel();\r\n    resetFiles();\r\n  }\r\n\r\n  // [4] JSX\r\n  return (\r\n    <AlertDialog open={displayModel} onOpenChange={closeModel}>\r\n      <AlertDialogContent location=\"bottom-right\" hideOverlay>\r\n        <AlertDialogHeader>\r\n          <AlertDialogTitle asChild>\r\n            <div className=\"flex items-center justify-between\">\r\n              {isUploadComplete ? (\r\n                <p>\r\n                  {files.length} file{files.length > 1 ? \"s\" : \"\"} uploaded\r\n                </p>\r\n              ) : (\r\n                <p>\r\n                  {files.length} file{files.length > 1 ? \"s\" : \"\"} uploading\r\n                </p>\r\n              )}\r\n              <div className=\"flex gap-2\">\r\n                {files.filter((file) => {\r\n                  if (file.status === \"error\") return;\r\n                  if (file.status === \"complete\") return;\r\n\r\n                  return file;\r\n                }).length > 0 ? (\r\n                  <StopUploadConfirmation\r\n                    filesSum={files.length}\r\n                    open={stopConfirmationModel}\r\n                    toggleOpen={toggleIsStopConfirmationModel}\r\n                    onStopTransfers={onStopTransfers}\r\n                    closeOpen={closeStopConfirmationModel}\r\n                  />\r\n                ) : (\r\n                  <Button variant={\"outline\"} onClick={closeModelAfterUpload}>\r\n                    <X className=\"stroke-1\" />\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </AlertDialogTitle>\r\n          <AlertDialogDescription asChild>\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Name</TableHead>\r\n                  <TableHead>Status</TableHead>\r\n                  <TableHead className=\"text-right\">Uploading</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {files.map((fileItem) => (\r\n                  <FileRow\r\n                    key={fileItem.id}\r\n                    fileId={fileItem.id}\r\n                    file={fileItem.file}\r\n                    abortSignal={abortSignal}\r\n                    onStatusChange={handleStatusChange}\r\n                    status={fileItem.status}\r\n                    UTUIFunctionsProps={UTUIFunctionsProps}\r\n                  />\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n\r\nfunction StopUploadConfirmation({\r\n  open,\r\n  filesSum,\r\n  toggleOpen,\r\n  closeOpen,\r\n  onStopTransfers,\r\n}: {\r\n  open: boolean;\r\n  filesSum: number;\r\n  toggleOpen: () => void;\r\n  closeOpen: () => void;\r\n  onStopTransfers: () => void;\r\n}) {\r\n  return (\r\n    <AlertDialog open={open} onOpenChange={toggleOpen}>\r\n      <AlertDialogTrigger asChild>\r\n        <Button variant={\"outline\"}>\r\n          <X className=\"stroke-1\" />\r\n        </Button>\r\n      </AlertDialogTrigger>\r\n\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader>\r\n          <AlertDialogTitle>Stop transfers?</AlertDialogTitle>\r\n          <AlertDialogDescription>\r\n            There\r\n            {`${filesSum > 1 ? \" are \" : \" is \"}${filesSum} file${\r\n              filesSum > 1 ? \"s\" : \"\"\r\n            }`}{\" \"}\r\n            that still need to be transfered. Closing the transfer manager will\r\n            end all operations\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter>\r\n          <Button variant={\"outline\"} onClick={closeOpen}>\r\n            Continue transfers\r\n          </Button>\r\n          <Button variant={\"destructive\"} onClick={onStopTransfers}>\r\n            Stop transfers\r\n          </Button>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  );\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////////////////\r\n// File Row\r\n//////////////////////////////////////////////////////////////////////////////////\r\n\r\ninterface FileUploaderProps {\r\n  fileId: string;\r\n  file: File;\r\n  status: UTUIFileStatus;\r\n  abortSignal?: AbortSignal;\r\n  onStatusChange: (id: string, status: UTUIFileStatus, url?: string) => void;\r\n  UTUIFunctionsProps: UTUIFunctionsProps;\r\n}\r\n\r\nfunction FileRow({\r\n  fileId,\r\n  file,\r\n  status,\r\n  abortSignal,\r\n  onStatusChange,\r\n  UTUIFunctionsProps,\r\n}: FileUploaderProps) {\r\n  // [1] State & Ref\r\n  const [progress, setProgress] = useState(0);\r\n  const isMounted = useRef(true);\r\n  const hasStartedUpload = useRef(false);\r\n  const {} = useGenericDriveStore();\r\n\r\n  // [2] Uploadthing\r\n  const { startUpload, isUploading } = useUploadThing(\r\n    UTUIFunctionsProps.fileRoute,\r\n    {\r\n      uploadProgressGranularity: \"fine\",\r\n      signal: abortSignal,\r\n      onUploadProgress: (progress) => {\r\n        if (isMounted.current) {\r\n          setProgress(progress);\r\n\r\n          // Your additional code here\r\n          UTUIFunctionsProps.onUploadProgress?.(progress);\r\n        }\r\n      },\r\n      onClientUploadComplete: (res) => {\r\n        if (isMounted.current && res?.[0]) {\r\n          onStatusChange(fileId, \"complete\", res[0].url);\r\n\r\n          // Your additional code here\r\n          UTUIFunctionsProps.onClientUploadComplete?.(res);\r\n        }\r\n      },\r\n      onUploadError: (error) => {\r\n        if (isMounted.current) {\r\n          onStatusChange(fileId, \"error\");\r\n\r\n          // Your additional code here\r\n          UTUIFunctionsProps.onUploadError?.(error);\r\n        }\r\n      },\r\n      onBeforeUploadBegin: UTUIFunctionsProps.onBeforeUploadBegin,\r\n      onUploadBegin: UTUIFunctionsProps.onUploadBegin,\r\n    },\r\n  );\r\n\r\n  // [3] Effects\r\n  useEffect(() => {\r\n    // Only start upload if we haven't already and not abort has happened\r\n    if (!hasStartedUpload.current && !isUploading) {\r\n      hasStartedUpload.current = true;\r\n\r\n      startUpload([file]).catch(() => {\r\n        // Handling the abort\r\n        onStatusChange(fileId, \"error\");\r\n      });\r\n\r\n      onStatusChange(fileId, \"uploading\");\r\n    }\r\n  }, [fileId, file, startUpload, onStatusChange]);\r\n\r\n  // [4] JSX\r\n  return (\r\n    <TableRow>\r\n      <TableCell className=\"max-w-48 truncate text-left font-medium\">\r\n        {file.name}\r\n      </TableCell>\r\n      <TableCell>\r\n        <Badge\r\n          variant={\r\n            status === \"complete\"\r\n              ? \"success\"\r\n              : status === \"error\"\r\n                ? \"destructive\"\r\n                : \"default\"\r\n          }\r\n        >\r\n          {capitalizeFirstLetter(status)}\r\n        </Badge>\r\n      </TableCell>\r\n      <TableCell className=\"text-right\">\r\n        {getUploadedAmount(progress, file.size)} / {formatBytes(file.size)}\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/uploadthing-ui/button-generic-drive.tsx"
    },
    {
      "path": "store/button-generic-drive-store.ts",
      "content": "// Global Imports\r\n\r\nimport { create } from \"zustand\";\r\nimport { createId } from \"@paralleldrive/cuid2\";\r\nimport { UTUIFileStatus, UTUIUploadFile } from \"@/lib/uploadthing-ui-types\";\r\n\r\n// Local Imports\r\n\r\n// Body\r\n// [1] Types\r\ninterface FilesState {\r\n  files: UTUIUploadFile[];\r\n  displayModel: boolean;\r\n  addFiles: (newFiles: File[]) => void;\r\n  updateFileStatus: (id: string, status: UTUIFileStatus, url?: string) => void;\r\n  resetFiles: () => void;\r\n  openModel: () => void;\r\n  closeModel: () => void;\r\n  toggleModel: () => void;\r\n}\r\n\r\n// [2] Store\r\nexport const useGenericDriveStore = create<FilesState>()((set) => ({\r\n  files: [],\r\n  displayModel: false,\r\n  addFiles: (newFiles) =>\r\n    set((state) => ({\r\n      files: [\r\n        ...state.files,\r\n        ...newFiles.map((file) => ({\r\n          id: createId(),\r\n          file,\r\n          status: \"pending\" as UTUIFileStatus,\r\n          createdAt: new Date(),\r\n        })),\r\n      ],\r\n    })),\r\n  updateFileStatus: (id, status, url) =>\r\n    set((state) => ({\r\n      files: state.files.map((item) =>\r\n        item.id === id ? { ...item, status, url } : item,\r\n      ),\r\n    })),\r\n  resetFiles: () =>\r\n    set({\r\n      files: [],\r\n    }),\r\n  openModel: () => set({ displayModel: true }),\r\n  closeModel: () => set({ displayModel: false }),\r\n  toggleModel: () => set((state) => ({ displayModel: !state.displayModel })),\r\n}));\r\n",
      "type": "registry:file",
      "target": "store/button-generic-drive-store.ts"
    },
    {
      "path": "components/ui/alert-dialog.tsx",
      "content": "\"use client\";\r\n\r\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\r\nimport * as React from \"react\";\r\n\r\nimport { buttonVariants } from \"@/components/ui/button\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst AlertDialog = AlertDialogPrimitive.Root;\r\n\r\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\r\n\r\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\r\n\r\nconst AlertDialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Overlay\r\n    className={cn(\r\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  />\r\n));\r\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\r\n\r\nconst AlertDialogContent = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content> & {\r\n    location?: \"default\" | \"bottom-right\";\r\n    hideOverlay?: boolean;\r\n  }\r\n>(({ className, location = \"default\", hideOverlay = false, ...props }, ref) => (\r\n  <AlertDialogPortal>\r\n    {hideOverlay ? null : <AlertDialogOverlay />}\r\n    <AlertDialogPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"fixed z-50 grid w-full max-w-lg gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 sm:rounded-lg\",\r\n        {\r\n          \"right-[5%] bottom-[5%] translate-x-[5%] translate-y-[5%] data-[state=closed]:slide-out-to-right-1/2 data-[state=closed]:slide-out-to-bottom-[48%] data-[state=open]:slide-in-from-right-1/2 data-[state=open]:slide-in-from-bottom-[48%]\":\r\n            location === \"bottom-right\",\r\n        },\r\n        {\r\n          \"left-[50%] top-[50%] translate-x-[-50%] translate-y-[-50%] data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]\":\r\n            location === \"default\",\r\n        },\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </AlertDialogPortal>\r\n));\r\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\r\n\r\nconst AlertDialogHeader = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col space-y-2 text-center sm:text-left\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n);\r\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\r\n\r\nconst AlertDialogFooter = ({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn(\r\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n);\r\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\r\n\r\nconst AlertDialogTitle = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn(\"text-lg font-semibold\", className)}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\r\n\r\nconst AlertDialogDescription = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Description\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogDescription.displayName =\r\n  AlertDialogPrimitive.Description.displayName;\r\n\r\nconst AlertDialogAction = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Action\r\n    ref={ref}\r\n    className={cn(buttonVariants(), className)}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\r\n\r\nconst AlertDialogCancel = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Cancel\r\n    ref={ref}\r\n    className={cn(\r\n      buttonVariants({ variant: \"outline\" }),\r\n      \"mt-2 sm:mt-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n));\r\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\r\n\r\nexport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogOverlay,\r\n  AlertDialogPortal,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n};\r\n",
      "type": "registry:component",
      "target": "components/ui/alert-dialog.tsx"
    },
    {
      "path": "components/ui/badge.tsx",
      "content": "import * as React from \"react\";\r\nimport { cva, type VariantProps } from \"class-variance-authority\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\nconst badgeVariants = cva(\r\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default:\r\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\r\n        secondary:\r\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        destructive:\r\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\r\n        outline: \"text-foreground\",\r\n        success:\r\n          \"border-transparent bg-chart-2 text-background shadow hover:bg-chart-2/80\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n);\r\n\r\nexport interface BadgeProps\r\n  extends React.HTMLAttributes<HTMLDivElement>,\r\n    VariantProps<typeof badgeVariants> {}\r\n\r\nfunction Badge({ className, variant, ...props }: BadgeProps) {\r\n  return (\r\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\r\n  );\r\n}\r\n\r\nexport { Badge, badgeVariants };\r\n",
      "type": "registry:component",
      "target": "components/ui/badge.tsx"
    },
    {
      "path": "lib/uploadthing-ui-types.ts",
      "content": "import { Json, MaybePromise, UploadThingError } from \"@uploadthing/shared\";\r\nimport { ClientUploadedFileData, EndpointArg } from \"uploadthing/types\";\r\n\r\nexport type UTUIFileStatus = \"pending\" | \"uploading\" | \"complete\" | \"error\";\r\n\r\nexport interface UTUIUploadFile {\r\n  id: string;\r\n  file: File;\r\n  status: UTUIFileStatus;\r\n  url?: string;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface UTUIFunctionsProps {\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  fileRoute: EndpointArg<any, any>;\r\n  onUploadProgress?: (progress: number) => void;\r\n  onClientUploadComplete?:\r\n    | ((\r\n        res: ClientUploadedFileData<{\r\n          uploadedBy: string;\r\n        }>[],\r\n      ) => MaybePromise<void>)\r\n    | undefined;\r\n  onUploadError?: (error: UploadThingError<Json>) => void;\r\n  onBeforeUploadBegin?:\r\n    | ((files: File[]) => Promise<File[]> | File[])\r\n    | undefined;\r\n  onUploadBegin?: ((fileName: string) => void) | undefined;\r\n}\r\n",
      "type": "registry:file",
      "target": "lib/uploadthing-ui-types.ts"
    },
    {
      "path": "lib/uploadthing-ui-utils.ts",
      "content": "// Converts the size into readable format\r\nexport function formatBytes(bytes: number, decimals = 1) {\r\n  if (bytes === 0) return \"0 B\";\r\n\r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return `${parseFloat((bytes / k ** i).toFixed(dm))} ${sizes[i]}`;\r\n}\r\n\r\n// Return the amount of file uploaded\r\nexport function getUploadedAmount(progress: number, fileSize: number) {\r\n  const uploadedAmount = (progress / 100) * fileSize;\r\n  return formatBytes(uploadedAmount);\r\n}\r\n\r\n// Capitalize the first letter\r\nexport function capitalizeFirstLetter(string: string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n",
      "type": "registry:file",
      "target": "lib/uploadthing-ui-utils.ts"
    },
    {
      "path": "lib/uploadthing.ts",
      "content": "import { OurFileRouter } from \"@/app/api/uploadthing/core\";\r\nimport {\r\n  generateReactHelpers,\r\n  generateUploadButton,\r\n  generateUploadDropzone,\r\n} from \"@uploadthing/react\";\r\n\r\nexport const UploadButton = generateUploadButton<OurFileRouter>();\r\nexport const UploadDropzone = generateUploadDropzone<OurFileRouter>();\r\nexport const { useUploadThing, uploadFiles, createUpload } =\r\n  generateReactHelpers<OurFileRouter>();\r\n",
      "type": "registry:file",
      "target": "lib/uploadthing.ts"
    }
  ]
}